/*

==============================================
成功的话请打开App-我的，帮我填下邀请码助力下：51466640
==============================================
更新时间: 2020-09-26 8:46
Github Actions使用方法见[@lxk0301](https://raw.githubusercontent.com/lxk0301/scripts/master/githubAction.md) 使用方法大同小异

请自行抓包，阅读文章和看视频，倒计时转一圈显示青豆到账即可，多看几篇文章和视频，获得更多包数据，抓包地址为"https://ios.baertt.com/v5/article/complete.json"，在Github Actions中的Secrets新建name为'YOUTH_READ'的一个值，拷贝抓包的请求体到下面Value的文本框中，添加的请求体越多，获得青豆次数越多，本脚本不包含任何推送通知

多个请求体时用'&'号或者换行隔开" ‼️

*/

//let s = 35000 //等待延迟30s
const $ = new Env("中青看点")

let bodys = 'p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn0F5WvUCUQHbIh2EPxkEdNtuCivKhW4VAP2UfWJKvqXiGs3pP5ZMqciW1HDyRb9xZ0D2JQSMrcgY1N7ytuh2xWcQB-jpYFM2rRi37DbSE8Zyi5VZ8U1AVJLSOSTnVdHxirCSJR1qq90oEn6ZRIQn23MUU0UvFo35niVrrkD-E6C0LUA1_P8N-z5CfHYqCqEErkT8pBjngXzUnB58zYZe1G3eUDc4ySDdPU-n4Ii0KnNHZZu6T6-soD2KVifu_4j_8Bto7C9V7D-E9MK1yjN7NwlNG_1z1yrGXEUUnMeK8cYELOiSDEJwBSs3YC8Lifs1gMvivIoMgVmcMLWmix_ZjxDROu_cl3BPW3PgGpK0HKSulGhNH2s9GCiFe3PjN5wuB9OJIwiQ2cMhiDSndHJvTLdqI6KvWz_npjFhhy-jU9jnPykPFbdpWVNW-L8OHPmRSX0MMvy15m2RL75uXrmfa3NJfGHx-ub-tsqSTf8mGccAD2Q_OJtXQSYJEOtQk8GUjt2HlsdlOgkyj8jJEUEhtHUwah6LlI8K6GpA6JY2zTmfxFL8xxF-SHYp_vwSJLkGiQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnyL_gLz3DJPLwcH0Ldvw3m41H5b7qfQ5Tlmqa836TC5vky7x4dcUp_vlrEAUzq2LhhNCoHuOVhc_jmt98avmhobKSqVv0-U1bS-Xdv3I4Um06vcNt32jOcR17yCUdZJ96kihvoqMTCeBAmVaxmHsWXh4odpwQtfR5QSha2y_qRQOfTj24KbtMeUtwNjGb81tYf3CG5_1WBwhZP_IwxWPAw7JJWQahvLwqXJVQb28-S7w5hyxZVBM2FmwYcHSNH1fSQUtzy7XH3YiSFx6T8fXJbNpQdvyBnkxnvQZD_MiwvBl6796vezRCtU3nzmYLIemw0H1YpCDOx4R7RFsmeTk8_aLQaNXzmCk3pr7uk7egiEib9uCckb7OWC080VfPW_79fWCBtr8-MNqQgYkZ8xMNYMfOQZDzwQD7ZvwjpCtisJoAavOX7mQTgqJNA_Jtkk_HRz6J44ayGQqVPzKSwtA-HA1j7_0WrhY70q9Gk5WYIlLwHnya1kFSvOdJxc-Bq3Lm0m2Qr_H75BZbvzlOqRyPWrTMuu8SFEo6ser59RufGHKuFoNHlsTPfLMBuw072oB5g%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn2W2Ml9T7dRoaEy_X8nG-hmroNSZknpjBAYbXUY-2GzJN9YWeX33mp0yxWe8D1kqaiPDAeYqiffIh3yL9eMcw_71Zpw2fzqk2y1qADGEOpmFGnVFhH3Lm7U2YKl_n6V7ZMnCKXAQCn7_AlEdq_oophFfAGrFJtf7jAA05sRBVjDfezVLMNgCe5jv5J1f7u4qW3G-yUj-53NaSvt5OkPVi5rVyA64JBO_50h5-GCPK9e5edRHohfTjwycpnrHX48IYnk9Docm1xEbmceHbgnCxmmIgBHcD3WKEbUMUtkQsvTE14qIEq5yUcmrnRraKUCWkxUcSWCoASwwRf6EBwtbfQOLwxcx2Eg1NKr4Zw9iSta1O1d-c3TM71KBFA8dYt-nvrDctsLmNdRkMLMhL692G5cAUFtVASVtP9DSZK6iZdSo2Z0voTWksaqk8slSgljrQ-DbQrItZWv9AGnpsEBJifTwFk_ipxkNllHZMBwJPi_JW-OwnTA8WjLOY0wtcXw7fIm2mmdi5ldv0CL3RGmx-ft-dbY_oO7nwvXB_hhHejYhaa3RSU1pogWF3U6HjgsacA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4TLP7F3KtXqJsM2TP3uMoPdCNcHLMKtAtGvm0Ln0uXqVnQrQkAijJ7FjECtHhBgzwraeGKNbqwXCmpV9OJ44bYsoTXGV_rjpiYDCah5Gs6sTz-z-hgUwefAwTRNvds2TBMXqE8EX7DfH06CZtcRK-rzC5uwBnVUR00asKv_UENRzPkrE-VSCsWAoADBJiYegz65aOgPsGmsOX07puRZwCV-ZmmTK9KI_0ihdopkmUy4j6062PcwWl50jkzYdj3rs7YHPsGDwICgee145nc2wXGmWVU7N0Eis4UNECn_pJT6RTfUjfiTl6dK2BosY1VsyxMHqwZvSEo8RSPijtBaD1jXQpb-7CUfijNIAVaIxzM9wZm0M1OgKHJlG2ps7hxex6rzcOLM5WoNJaELSzZ3u8NxqlGM_Fwxz2t0NGMGBxW7P4uaSB1qKOSlMqDqeeZKT96SL88v4hot5CJtFKZkGhuVpfP9WdxfDAGCRGSSSMHehvf0EWOkqbi6_sYBrSMkRv2bsDf8ZQvZQ8b97pY_pdCgYcAZFlXJt-hCJ8xEHypViqr1d_DscbINSxqtZmm-qw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4TLP7F3KtXqJsM2TP3uMoPdCNcHLMKtAtGvm0Ln0uXqVnQrQkAijJ7FjECtHhBgzwraeGKNbqwXCmpV9OJ44bYsoTXGV_rjpiYDCah5Gs6sTz-z-hgUwefAwTRNvds2TBMXqE8EX7DfH06CZtcRK-rzC5uwBnVUR00asKv_UENRzPkrE-VSCsWAoADBJiYegz65aOgPsGmsOX07puRZwCV-ZmmTK9KI_0ihdopkmUy4j6062PcwWl50jkzYdj3rs7YHPsGDwICgk33hhA9E0N-G0Sv7R3fdoagPEQZltdaBEtvKkKtH-voCC9Ce3dIGqUZI8ss6T5iyTf8lkUEtL5yay8MTgz3OdyXZdJLoeESPhI5BGukUV05zboAo--x_awLQsCgT38Sy7u_gf3s2YANq5vMQ8rjRG_Fiffk0wdhV4jsZPofyW_tSzHu9ISg3buh5wk9jJCKym5L5rvapJZ3UotP_MFOAMx2A4IzewG5snR6GqqqKPPztJo9qw_-WWS3FMCgpQwNrANgbwFno8EoRwIzSZiWfJbs46NL2OqWawlDwDCuW_Vl3DHUvVuDZyQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn-qzK374qh0er7ik9AbwwyJu9S4NCP8oNURWA_WR5ZsSK0efTFduFXzHRYtSQoLLP5VSLMow8l-cmZi1ENqidXqL3t-FbhIPgdEZACqJ24hhxTWrpobGcMWiI1fZnJUf2WYRhz4HCtLQZ0tlGbhElow3zKiiUSqQ0W1xjfDOH23P3dzW9EtFS7LyHn0l650hp9Wt2iWs0MTC790w_iRB-8Y5CCWHRR6IMG22uSdRLGdCE8cA0hFrCQsD11HQPlpa1mnuPC6YqtO2G89Gs7AQA8ZEfLt1JUfUXI7o7tlcZuF71fUkv4_hNq7rZepGvqyCQN9J9ec2xfjpJhdHM_iqlFHJy7cJJ7YuGyfSf5Yb7GQqEQN-4qLEMMTdwyKgE2TN84d4TArC8bd7UFME_172mOwvS_yNbw4az78YABaiLV_K713YKPoGFDgEljfStisqbq3jI0ICOqXLyP3xx8JRGVVwlXjK61Pm0orwfqX0WATv_-ElnaMK6cNcaddVoyPB1DE7WnOHTyxLjJq_kJQtKv48CRuFXiACly75u3Hvhw7YDWL2rbN9jkXZTDXfSKpViA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwsD-hhfPNUHopSHm2NojB2tMe9RHqZT3IZgcOdD-4g0cchAV5JMImvWMbNypr6h8vhhL2fDlUn04yJEnqxEXSQskSFSNVsBhsX4kNzL1GTlAKQPp7dh6HKK8S0SNMwhobJgcU4NCJOsz6t0i63TPM9o5_9oxCKvbXI7MrUF8QvqL1enTnfpFBn2CPNY6xZA5qH4NeiU518OH8II9LIHgwlR0bHrMv_QR99qXOdBowXh9zg0tdx1hiyNP-7PZaeSxzA3SNqps_e-1GrZ0vWq377PPFMCI6YfGrn5M2YBI-Z0unAinvGIkUftiTyndYrt2xz0rZ8gXPLz2NBH2gKZESDVQV1JmMxlrW-Xp_KwBERDox0wS-m-6ZHRESvn3N_c3NYDJXCx71DhjtefOfBJi3FIABtmdCxk4bLZJS4eAAU03dD9xA8ybelrd3IGWa2ZbHKk1DXEaGcxzSuKmsm594-Dy5zoGKbhV9nWzrv7zomMhIswm_1QdQwiCghBxOz2vGJTBs6bXrhvZ3qdSyffA61Qaxa82V88_CymchOmzXa5FDlH1PhbPNsroykaYGtgqQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwsD-hhfPNUHopSHm2NojB2tMe9RHqZT3IZgcOdD-4g0cchAV5JMImvWMbNypr6h8vhhL2fDlUn04yJEnqxEXSQskSFSNVsBhsX4kNzL1GTlAKQPp7dh6HKK8S0SNMwhobJgcU4NCJOsz6t0i63TPM9o5_9oxCKvbXI7MrUF8QvqL1enTnfpFBn2CPNY6xZA5qH4NeiU518OH8II9LIHgwlR0bHrMv_QR99qXOdBowXh9zg0tdx1hiyNP-7PZaeSxzA3SNqps_e-jK1YY4bfFk0PMC7jzutom4CGD8kCArqw5mhrWF6ev9i_1Oh_CXfalNa12wT4xYxTgvfoiG3n26F4BHVAruTiWbHFCxbG460ARSfdqS9lasnnGPfDcu3iF5a-meTUEgll96CELz-jiqbW1fmQLpmePyaKCh5ayxXJf9uVLDqJ5yO2GhcUCLjQLT8KeQ9yG5X0_vMP35eU7CmfHOReFn2eqYbLljCJZUoKmE5rtUI9shyYYBGylHM9RbpMZSNKGF1XagdfTDWajGhUaSWBuRTdWCg4TO2Xi0IOXJMMGaAYOUDD44dxmgTugw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4wAUYPPvjitPjyRZup6JIC1TIo-gZONzl2h9hiEZ-HrpNh9pBAPESPoihk_TZl93JE6x_GFOON-wIduH2mQW-UnOWJptIZJFFiDtdqncBLOvziqwD3TXZuc5q-xLcZG-CYaupH-9DPQrJ5bks1LSx3s9_PHC3c-FItN0RPJMYa3bmbA4GgZ3dwO0rlMtmh4w6Q7lyeMpxGc9IukiUSaHZ0nQweq1US_K3uCWfpHWm9kWKns4pEU0F-Lso7JekZVCBnFTxpl2JMgJBhm7TbA8W0c4liJ9uIES_buA-yB7a9OGaW2nbCGdd9qGu4-KBl1iYHM-YYxLyvXQ-B_P-4Ri6m_TTr2Ir1MyJF0x_2240KGZDa1KazHmOVF6mguu02GwipCticKSfOsRPhExAbSU_i1VbQQ26N7ZLge22saONXbiBOmJNNXsReCy6W1cBwlj_g34UrMCZPLqaQtY48E4ztBpqKYbII0kcSzDuGY0ECqKcWWvtOSHYsJOJYlzslYEqVQHjddIH37UHecF5jBkU3IsQyZ3tTMeOUKN6NwlNwBIJpBIkmXHSheVrhS2M0IIg%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn8_wRAinamH2immr2gjg8dVLYHhi6gfReL8YEI0FVsRCcg0F4xPARntzpNMCRKX4ncSe7g4wsXhsZuVxXMhMSU44AzGLA741vtOiraHGKyvNt1MQqJlMMvNkPrXfe-YksHOzCwL8zjmKw00DOwwRnqa0hwTGqAhJUrINMhvHytwNgwWJG2ZH70B0fQuz2oPOGPgRy1c70PLgcmC0sgy0BmmrfqvdRdQMp61Mig7RC3oOrILXBbuSbTtikdyV_Dw6RGgt1CBzXjgO8AKwGka9arxzTjTG_U4RyVm2KmcgOHT2DTAlOm-p-ws5MLkXeE4eYakBem52F9yxnkemfGK0YEi9xIzNzn5lsiA5R_9KmiddGRFcdnsiRA8jpHsZ5BjvGAj3YN6jr_2h4bRIc5uyybeEAmWCoUqHQCjmqej7GQGSkTqqUMi59TrPeQY26DVQLjME4COIYfYw9LhIHyhJWVgPuk6_NtDomaEzqktc6jkpo9VTNOmEbvgK8vdQkCi07Z2aDosRSboCx6eMk1300elQ-k-DEbwPwVoRBzwBlpYGMh8wXDeZPi_WDFWcpREMsg%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4c7uRtlf2hBgzIGL0ILyovqk02QZNCwZpOY6muLuE49_aVn68cN_Q8RBJ5SGALGdN0pTVQed28xkBf_4Zn9WE8U6WToAH-cZs2tnvDq1djqk940Ra-PEm-sG5iiUDJb5cwcB9V4t1ka7QmOWYAIa9CKCQchHCfL_sdAW1SytX0Q_UF3Pt6h_61CqHsm4LLaIs0EPGMiowodVWzxs2P6JwH-gwRwDb00J78JYEf-wssPrhWQC9O4vaVjYtVGAVkS_XynjrnOepEfvlR15PGsH3bubGHaWRKvUdxkoN-v7HF6ioCGsKmkdmdPpJNaqBnasFWzZNPVxfeJPAkwoh1pyS2uDOrdX-xX8YF6BTT2kH_9Necrl2aBJpggcwqyk_gOtKLr2Kq1lNBkbqoPnuxUuD8Ry3oq83RVtrtq_ESD9Jea6yBdNsoR6OWlmp5PSfzXWsF7dmAI8GGk_nyi4D12J4pwt8nQR4Pfzc-O_rQXcr54Jg_a8d_mMIrt4v70_AoSsjJKX04En2XfC9i7aftMxBwTf1iDH_35zCZhr5x0KtqC_n2PnK4b_aq4mdvfA_CbCw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4c7uRtlf2hBgzIGL0ILyovqk02QZNCwZpOY6muLuE49_aVn68cN_Q8RBJ5SGALGdN0pTVQed28xkBf_4Zn9WE8U6WToAH-cZs2tnvDq1djqk940Ra-PEm-sG5iiUDJb5cwcB9V4t1ka7QmOWYAIa9CKCQchHCfL_sdAW1SytX0Q_UF3Pt6h_61CqHsm4LLaIs0EPGMiowodVWzxs2P6JwH-gwRwDb00J78JYEf-wssPrhWQC9O4vaVjYtVGAVkS_XynjrnOepEfeFbs0-O1fPSfqb9YZomkFgz6wI1fT4UuJ9Lbcl4jOYANposfk-LBGFfpclylMoo7i-5K7Et_glv4zVHGrtx99g2DkvdS2j0mnXk2kLrsk89ejKrO-KcEQJ4bGhJdtxpThc90alyF1ioGZ3AD1MMK_08SVn0OXpx1gieGxsqgGVu1pdVLCNmaXFjBYloqTaxK9xlw_C3heKT7zT3gVB16JiHdg6rSEIZq2F7kttE_H8ttxnnIjwqDZPI0fLNw6T9PqFLEDj2IYQ4ku-JQixVA15IgjGO6LUH26e49GkKJDUGYyiwDONxTUw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4c7uRtlf2hBgzIGL0ILyovqk02QZNCwZpOY6muLuE49_aVn68cN_Q8RBJ5SGALGdN0pTVQed28xkBf_4Zn9WE8U6WToAH-cZs2tnvDq1djqk940Ra-PEm-sG5iiUDJb5cwcB9V4t1ka7QmOWYAIa9CKCQchHCfL_sdAW1SytX0Q_UF3Pt6h_61CqHsm4LLaIs0EPGMiowodVWzxs2P6JwH-gwRwDb00J78JYEf-wssPrhWQC9O4vaVjYtVGAVkS_XynjrnOepEfX1SBtFWRXt_KJHKk2bCfImwlzybBx0DJx_bLwc6XdVxu-P1zjXYMR2Ghme5KyfoFXMRjM3qnE2P9rX5OyYxWxLmKu0bfllmvVN70LW5F8Rcf_ss-sfXF-ZSNJyt5bOUKIXQWBBO8rudpLRIlLHr1-0X6Z9Rk7lI_2xwHI5Mfhv36t4YqYGh8u1f3fUvCQfkyqsMCOv_2CPtFmFz5glI76PvquLE4RmPxndoqZ_pEQuUFpB8v8ty39n2tSbuN7ueNSB8dgSCJ2xQ9Qqevo0uGwRSEnpXlS50ESwtlcnhVylRfDkrBw73tBQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5noyDXQ-pcO2zrv3OA9iy3NnBqRmCTiv2z7y9V2N7Bvoe_GA2XBRl9aGPQmJEGlKfFUq0zZiqKBN3WiBf3VJozxHrE6zVmMLxFfR3Q2zaeydNKjob3h-luPbv2G9xMMx0_-wn024wV90cCg5kLieYSvXZK9yfwTAsCr18q3SE42wMoipPgppT978Ht-4mBxqrrb_HdetsObLhgQQupNXFPxbM2pvA1yPVK5xoC3McIvYg_aC8qDDGo5rmRYyJzhPhEaF-iQcHbUlN0miXh6TUiho4kRq5RzAp_Kx-JElRXGv8BA4HNlIgXxqPkVmlSJDB0frHMvBpEfq-prp7dUHoVVbqsFW78wDFiB0NVuo9OaxrTeh551qe85ow32pez-mHHc1WidMdeQqhxYe03t8ttz4i_ggLjRFez0Ae4mFexUSjQmTFNOMM7o_0lxED22Pj5SN1ot9AkQh9pvrUp5iPTki3m2_gmXyq_rKISsRqowU0nrX9vpGj_krZQVg1Ox2FwHBGJcY5QyLun6zam5WZ4C6lNPdqyvLR0ve_OSBTyRm84dLihjW9dILX7A-34eVw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5noyDXQ-pcO2zrv3OA9iy3NnBqRmCTiv2z7y9V2N7Bvoe_GA2XBRl9aGPQmJEGlKfFUq0zZiqKBN3WiBf3VJozxHrE6zVmMLxFfR3Q2zaeydNKjob3h-luPbv2G9xMMx0_-wn024wV90cCg5kLieYSvXZK9yfwTAsCr18q3SE42wMoipPgppT978Ht-4mBxqrrb_HdetsObLhgQQupNXFPxbM2pvA1yPVK5xoC3McIvYg_aC8qDDGo5rmRYyJzhPhEaF-iQcHbUE2Czmy4LTHndhbRbjm1FqYSX5VOPuFkadTpK-ZfChVrOMLNxdSymUQL6RWWSWQ3in-m6_y1LSKNE4B22kMpQj_ghB_mA4SpyhCx2Yj7S_x3z0bT2Ie4RXzEWRx6vCeoC04g754Sznh5c5CwZCSKwSv4ykJjHQIAcMdmEHvZwJ11gYMTcY2F9Dm8LWvDxvpVqCiyvlYl6xIgjdhGXKS2pbN_Fsd4Crw1EJlgs_t8dgQpsT5EzkBfEqQyhjv7sqO96LZ8pxM2tcwaRp-htaqMDLdRvD748ef5FUVz1RvgtVDfpbjclNSBvRQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5noyDXQ-pcO2zrv3OA9iy3NnBqRmCTiv2z7y9V2N7Bvoe_GA2XBRl9aGPQmJEGlKfFUq0zZiqKBN3WiBf3VJozxHrE6zVmMLxFfR3Q2zaeydNKjob3h-luPbv2G9xMMx0_-wn024wV90cCg5kLieYSvXZK9yfwTAsCr18q3SE42wMoipPgppT978Ht-4mBxqrrb_HdetsObLhgQQupNXFPxbM2pvA1yPVK5xoC3McIvYg_aC8qDDGo5rmRYyJzhPhEaF-iQcHbUOwahl2rzwWBOoElz22pAr41UZIW_kdq79fDjKGmF_SQc4tTgCFheEbBU6_vUSWziPMTEw1VClSnU9fM_HgkNdB3YRy8fPO_xrLC97ZrF7qmAotRqKKZXJGosRO22t41yNQMHEvT2vWN_yF7DLxzpKCKetzKYNDyLvsOL_aftISVcI7f9cskuV4MOboyrR4t8Q1HEctSsoMMK0ElaxtbGz1KQfOaMQParPgXYd1zazK9CHZqiPJgm7Ylk3F9HMuKQ4LpYFNLhTtrf3vTemfaRWkCsbcApiD5UyFMRTFU2IgYAZXcZ8ejTBA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5noyDXQ-pcO2zrv3OA9iy3NnBqRmCTiv2z7y9V2N7Bvoe_GA2XBRl9aGPQmJEGlKfFUq0zZiqKBN3WiBf3VJozxHrE6zVmMLxFfR3Q2zaeydNKjob3h-luPbv2G9xMMx0_-wn024wV90cCg5kLieYSvXZK9yfwTAsCr18q3SE42wMoipPgppT978Ht-4mBxqrrb_HdetsObLhgQQupNXFPxbM2pvA1yPVK5xoC3McIvYg_aC8qDDGo5rmRYyJzhPhEaF-iQcHbUvEcuDalQ_f36SCn3K1M3qxvv4LELphSTBzOfVGC_xPxib9HjhFn30wCUVz1XRa6OhzwewAatW9lcohVsxAb-H6YS_VMRbPykSNh1dwpgWg3IiUmCL9C48ZR48yDuCW4lwyJxJH2eNAEapQg_lBA61LHVybUmnTe8DvqtvBjyWTk8SNK4iWNA2v3lSOkF9F3OBErL37gXlDB9Paf1KeWy0z83iB7cjNEyycsoMPX0vAqwTlmD3QXUqHH0W02p4LZcGJF3Cgz_nYFQNdxxslpR0OUlAglLlHctiLMoCeHPxoxls7O7dq_1xw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5noyDXQ-pcO2zrv3OA9iy3NnBqRmCTiv2z7y9V2N7Bvoe_GA2XBRl9aGPQmJEGlKfFUq0zZiqKBN3WiBf3VJozxHrE6zVmMLxFfR3Q2zaeydNKjob3h-luPbv2G9xMMx0_-wn024wV90cCg5kLieYSvXZK9yfwTAsCr18q3SE42wMoipPgppT978Ht-4mBxqrrb_HdetsObLhgQQupNXFPxbM2pvA1yPVK5xoC3McIvYg_aC8qDDGo5rmRYyJzhPhEaF-iQcHbUNBHt-AP0C096heEB8tzttEboo7Q6MKlH81p9PC8i_Bnn_J_o-c6v24dOCCFNLKNOqibMfFIqs0xCfSmlQtOCXlChfjEmZ8mHAKh4lrKHHd_Xa-oDqoMXWUjQpXC-Ku96SxT6Hje8B6-Sw_xZGGg_OQgHErlaJHc7ZUnNvHvXFhq4hW67LU0gai9cFJmCKBxhT9yi0-6P_7iXdxhu0d2QfKkBSddmG0wx3bHREv5hluOotwpijXr9SDHl7l6_-7W-xUimzWeR2CDCXALCe8WX7eCZ_YbPZvMV920N9r3TxyF3jXZnJyo2Aw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4j6xT-99wM3wmBP0f4M-vkrTnZ7joOlukR3A-OtGsFS11uL6_j1uzAJo478TTc7Ht10rSdl-SuF6yiOuubBSNOmhOuY0n8FGHuytCTw9EWZnB0emPEtAM8OodAN8VqqrW1ieFhWaEW56GMaeN-7ZExTx1KRQ4SitWPUxunpeLoBCdVO4Lq_zoX78h2QQCqFwXhhXPnqgVfPKRXQQkeF2DBMQdQ1JyrzsW5z5YslkQUJyDKwJSvEd7kcQNfEb9YoGvyCCKuhhZCvhxwLq1TiwSGL9XKAPMiCrse44L8jC3Yc2ZDCNAHrPiBl-3pTTCpOMR0BCi4x08pnqogOhZVPssohuWSCELL6Cz_tl5BvMlo_Fojfc__vcT6c3UBSaG41_DXLUW-FswCQTgWMjNOIWt4ADE4qxz-45_B1hfiRiA-UAflLzRER1O0Qf8Ye8369w8beu3zG9MWXLKHx00h4uVHrNujTw310gDmMK9Igtt8edVOE00Q9z1XHqjBT9O-YykPwjrYfRlmrEm6NilqqLjAKwLkEAPkvShX35chKcTGEav4k_cS6VSKKqGBbxuZGew%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn-ZvlXD6SQ9FtAJ0qxzlQOWh--ot16sMwpJClS9ehZLGesdYoiZufRnpnriVr0akCm5vbbkzZitsDckZtghWkoQ7ZjcyYNBkbgdBCi6EsDFz6jxrIp0yFfZNFD-GQUXcIevu0kjC6lMuSSOMqCdK4e25XT1z-s_LhO4P2N55gyto27v2DRqcc6B3InkeuhOmjiidZXgvXWNM3YJDi0LE4I0dHEPmhV1yJ4HJ8o9RjoiqGpkelbk8vrvFfVtO5_wohjjCECDXDiuVssanYhIOlI-g0aUo85sZd1tmtTbuTmryiCng_6r6ibaHTUdv0xLXa4Uhs-0tI4nCWYWOkppa5Sl800KM8mfzdRjbd0al4sTw4QLsgL0PCgeHEH_SH6CBVT0G43hULgZZ2-RR0F4nLnmH5EUMRCz4wfqjFeM-q99juo9gbqfTU7kEhPzG-Z6U-ilGDBM9y68_cnI8_PeNWhl6Gr3HRUv0hhMlimn7QtMZLIKO0iX8i85dM-4Z0tuuqJv8ViUtnWK_aPCryQwAhs4gRmCdUh4t9-Cm4IdPQ_JqXvhOBSjFOvaU3kpJTdNx4g%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn9YCwan17hAx05D3B0Lq4VDnSvKmDXyMIAokwm-gY31Qd8drtCFUTzjU0T-wdrR6BQj5ZJaXqIUP8gwc7O9iVOu53FJOFcktZ0UL9I87_zmuucxOnkgbGx8Eplpa1kWPnkuD6eLZqO1_D1W1ts_KlrxiFPPINaiPS0nHIc9XRIyBqurHIt87JqqD5lFUvy0A4pZjyujED0BalpqR3hVd6fgLkhBL5ow8-s7WxTfr0Xpoz4GipTjh72EiLgOqyqJPZv_dqiL3a7NF2Euh97g1fmPi-lWKHZoaHwaW_Mv36ycjcWL_FMQ8PNCX9H3cerQDXEZfA6dPT0tXFrBm6_MuY3OOh_JAGQ-_Maz76S5BTI65JaoEUIYInpXUAmpWceFuDS6Jgcfjz1UF7LXVb5sbudDj8UpsjZf5TmErUg3lKAhV5ntTd002SHHzr9JxoGPPUQxGiNRnR0bnbEdsTzKyfQtueFatvuRi7rIRzh9CK7LxEluF1teWsqeGPHV4D40B0cn3EbZNg4m_98PBKFMZBWkeeYekzlpldIcsav7-gGm0j0lyCrsHe_SJdAd6fJ57iw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn8wN-_nBGyID2791IOWPmiOuAVTFLJttCp-09t5rh_NVX_QP8fMkZj86j_AFG3x1oBAQixiobv764FBdjSCuM8ZDV12ZURwKMs285Xb-qOhIMnezABO7SfriKdNVgQOyq4gFMoVZrbFLSsgXa9agQZfoTJvYFkVbvJgC6JLUv3MQkfzRZGg34qvYZxiiiAE0LmYsFsCqNMvpslY1DCQy38hHitDn_Q2z1nTNl0xMOzrk3E5bdaeOtyrH8ZZaHqNJlZsDMgFywaeYN5wTD4ODv21rtauLfhDyQw-HVvebmCzZstc-HgJLOLDbrURpSRCnN50ojz5ss8CJl9kd8nDyfCqn3q6qgSoKdAqCuIV_EsdvFlQKjc5CkJVIpcMqSg9XWrE7yQaHC4qTRLAarOEwrmdyav9bF0tQHUf6lLOD6dng58OvW3KOxqpfLsQvdyPRk0KegJ3CMx-lfrMn1fypRyUJroNlpPnuWnkSh9BlkeztJCeLRoZAs97apiYpZl199xK6QWqCPToP7bZXv91nbT7Ah1w6zp-crj6UiQ-HlwQMrIGGyaPqmeX1Ir55voD1NA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn5WZqemL26L7yIfIYbZLCtvujJDtDzyvig_eXK1pmIrN3vIpF512rtf3Bcc9bAKL0u-4fkMRuhevhJNYyxAQaGNXoiu17ld3luLaGN3ZzfB1dQfhSDuCcp8UPLyhnpqF6safOw-K-EUwFvAJLf3rJrNVGcitRuhVxVHc4BYI1Twipe7akj20mX4hYzrjb2ztmhR6P-uEx_YfnUdaNANbTxTu1ih6BS1caDL-Vm0dAsyzBQaBcf89Zo25QMNAm5C2WH0CXxldSo9v_bY8TMaHzE-x8Tp4H8OSvQKZ7nkbfF5g_kAoPcDP2bknQUv-iIMbP3x219Xli-hdREkvzBNxCvvDTq-_6mXao-ue-6NJRcJS9sBfx_QHo9dCCpO9kZlHW3C2Gs1KeIg6q06SfMSckh-M-hFeRi5J3LYjDS111ht2tRuBCJHVuQSfvtVVeMfmcyulYGvGI2olfNVJ5vA1Zc0n9dYFaar1gKFW6tXL7VzJwZGr_CT2D8lPqz2LiKpsBFHCuYtRTBd1dk1GEprFAnxhbmLgcz6Q-U9gcpHlJ_ZwrhKB5ulRsMLrfHiIDnGrAg%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn9O-j-WtOANd_v0kdLze_GMbmb5Ef1IGlaNS1P5oxrMawYV7IgVKM8Iwul1KU3MwhzDp7SPa1WwK4xaXZ9BXFgEPGTB6zYOaEnqx_OZZ72hK1vFFeGZfqDKpS5Qrd9tmW42FLKxSomMYaHydeYAQQK8OOEF8KHIK85T1Sh83-VTePcjm_iRg0WEadjDuP4cxEf7H9nJzporcR__QRbUVNIzMWe3j38KvTHDxkAAiyyNJcz_Z6MRNPO9AAawwvd0kgpGBHN5TRgfN6Lt-qtSPPrNsPXawZfvcSOE6nhk74GHyVs8MQKIPBIZYh1fwd0F-JDa7JNjobuWur_Peb1cX1GdNvk8cphImQ1AoyX51EtfZgYl6MPQ4mxlc4reCDjd159kXDDx1NmqhbqArBhFeSCwjoijMX5EaF7zWoqRIvz78b6Pm0PijfusUEok28cXyigtXpNrPqHAy-rYTi0lzpV7gqK5jJavK5PDOU-bOp_S-StvJdvnCj6UWNThAW8ouw4XY09PM3eg4qaX6yX51AJSW9OPBNigy5a84vC37pwZGyc9x_6B2TvuuEHs3E7ZPTA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4QdEaj1oDW0h2OGpWJPfhUxZIVZjGMxCZKIu0yKf-33vrdiKSdCVX3pcKRmI-Pj3DSHP00oD9wQkn1tysoFDgLYXObTZQER-_s7ZXwXz16VtAqaDmsiClwITIt2MviHe1-6qbaXJnzUWPGpJHakdQnDsZQNVzK4nQK_QRvop1rHH5v0U5KGTi4sUJOLr5ox1aQnH33XKuFi-Fe90fdxCBPI0OTiY0kg7qiPvwq5dOM7mLL03oY-8YPDWbUyOvTVovzx2adIXr0zRG9JXPb899x1DZ4e0b3C8jLCfYdXpbY__3LBUDRqY8o_CQVcvY2PdRWjFU29MKJl1O7TOL93E2e8rnm2ksFEwVUD7hu7_5g3OPvxfUJXmkDeJmm-T_XjC5KhiLJVJmUaSbZEAzczP42wKIQPNCpP_gsmKWhZ68C1BfoazxyYLZmSh1CZNAZQah7rJo9qZbwy7FQt4h7v7NbT8AEhoN3xQWKncPM12aIlePOKoUmdKqZLzwzl0MAmXkqo3U3CPexq_oMzNV0toYJFmxvZEXrw4lOnbjshoBsVIb-ZJsV95liAMXtkWXmAHg%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn_r7E3YUsQ9cUl4kq6aal48o0kCn6jeeMLFe8MsEGcdE5xHuv0qw4KWAT4KKgiXnlFmp-4tRWLeFOaoeO4nQweKA-GxZ6QXteDP8zNDZgVuZqpztaOByPSjkQ27PFR5oGLwK7eO9Mac0eBmw2d9PoJY-P_SDp6_0Ix9aX1kIkiLp8YzcVZzfXoaxv4FThu5k2WeTdTuHIzYBld-IoOHxIWuvVcY1XzBCG-HtK7dIDwgxCv6CkI3LaAyoywDg5UeQd_Wi5uoAicaDvgcj5j3VElO08Sb1SfrFIeKAu7B3qF2G1H23PuBcaFNGRDfdu9looTN5khYmQZTrG0E6bWA1f-Cj7Eu6fy-M6WdwALYiS2Uy_rN9z5-kBBiA2ISYRR30dVjebBVn0TliDn68KZVW48nG5TJvBstnsb4LFfkzClrwCKL6ihYk95UkSti6F5hbdo7hBnJtuHyio8QVgaizSa_QXbyiEkZ2M1RJCPcjsbpNnZqmA0ov4EF_RFCo9_-SpyxC4q9OrOW3IYf9hGtx3ejo7siPksD9KGwKf5lmhCTZIcwEdHYWGfEw3FA_qFX0Uw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn8ecShFEGlWCR1O9wpBiJj5Xg9_AeEFgij7l7JEIkeNXyVJ7V11UtkY3Hs-Ow5lq37XGMNtmIeIeEf7nA8vyXiGcspA_RuZvqFRJx6goaaL942XlH69CW7Qm-T2x7jJ_mx_mbTbifK-GVXNsDQIzh_I6OKEo4cPXWSmRGyICHsHAazstSUnRnTaF_j-hP2mwqeg3IwwO3hG6JOFbxf_DjS0zajkP0pxvWS6Dm-1wbz7uyHnKQjhOhBw4sDeL0cb_KVaxcXCyLwD0GwXSTjmjIpdfSeUIbzfNNBSPrPGz9nsw6PZc471aOB4IgZXXddBkWSSpf5WBJxRBqunj1sFd4LgVIZFKl0GVnod8PDtwf8SC-kDiySnfN-V0102dvYaesy3qdBf0kH_kiMaadVr46J7Bdz1y17tN7lFP-n4bpR6shPMsqy7X0RMuHx_jrSdlIbbfL6IyFCzpiD23RFhCqoFskYltXvQ2Fem7xzLuaHx2tVX5cdQRrnxOx1MZam1GD_FJuSn-roxu_RnR45WQOelu1DGSGWT-ejB9BtfukacUbgfBjH7BIoJmMrcvtlXWpA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwVzziuZhH9wxRpnbIROUgeOyUM-BNiqSgQINyohYgiAUP8LQzXWYJbjgxCv0JkHoJZ5msybZ5nPfOjesvsmJWkfw33VdNefVFtABJYi22R1GmjKIfhXZGbTSs_w3dGmZ3qgFRBI6j1qg1HqBeqFxNNmJM2vKJ9ArOGJTaNsluI0PL10XRKUw_wZmyRSQYOGceP8xjQTFxulHtM4aafshjZ-i-mOfRJqabTBTN-4jtRcML2Y_Q7uNiQ2qUMbavlGc9xlwgT_bRJ7oOCYY-ux3Z8mTbUQhoOl1SD9m2CU7-E42DzrEFYAwZYSjJBfC5yusdebKqN6LLj1GTfzjLPHVM7lXknnOUbp-Zy7OdS5ExbItYslLaBLtr0RU9yiInxtIK0Sw_8dtNnNGnCIZGL6D1btmQuqSR_Agi0W4Eg-FOBJCWh8bW69fyuePQLKhviVD8-mG7b89zEJAaV1Ta-K9cFefOYV7NNe0naUfrHInrKV7cCZEkl_FIoil1iM8Pp8WpbCwGjnrgE2ZxMXwhJUaUrGQAlUUNKXiPREGZ-Sn4arzzkmOSF9QUn81LD5G51lbg%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwVzziuZhH9wxRpnbIROUgeOyUM-BNiqSgQINyohYgiAUP8LQzXWYJbjgxCv0JkHoJZ5msybZ5nPfOjesvsmJWkfw33VdNefVFtABJYi22R1GmjKIfhXZGbTSs_w3dGmZ3qgFRBI6j1qg1HqBeqFxNNmJM2vKJ9ArOGJTaNsluI0PL10XRKUw_wZmyRSQYOGceP8xjQTFxulHtM4aafshjZ-i-mOfRJqabTBTN-4jtRcML2Y_Q7uNiQ2qUMbavlGc9xlwgT_bRJ7oWQsHy80j2i_gDGksFouApbTjUmT7c2gB3s_mpvsAJczRPsfT_4gyhCApi_sQ5CgtlVvv7cTCppfmP396SiypRevF5-ajacZLZ1F78kbcxIH1SdwcTRR9RMGqvkFsUr8zJGWKTUm0kdV9qvXYWmqTGDFSklMttEJpug933z35-VKLgB98dsZlP2og-fIcY9VG8Otx3SAjbQAqkLIO4ylxmWJ7S6xHZUf99XeXzIsvQb4iGHc8eBL_nbPW_F7MG2pRfSo6MRkDp-SAzQTVIFFPQCPgJoFhkk9MBAkqQrPLXwKnFlhXtbHgQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnxjJNUW8bSLE736A0MEErtm1GVHl0aybOnZyrYUucFSIfBpzbo0dOQtMNSwZvuUCYhu3fQfCUrtuXmFNW18vc6HHYjAoM-qe5_K5tnjFJ4YfXJYnkxLhwN8g22KvgIyXopqiusQBe3WH9onhfk8BpYb2YBb4F8wL4OLn4NbYHeBVQZit4AyCZemqmGuUyg_q8OD1CHIsOS5z-CyEinQvZRodmVbgbDaiGK0PHJvmcUPNSkScf4xfTGbx_aRerwLdudA3lDAa_ZuoPBd67ydASCd4vOesrKloPIS-AWLOiEuVmoaE3YV6DC5XecU8XiLgXX5cXKnkI-DcBwLbRqMuOwINX3DRbhbv4C65Y0xUNQy_n7hC36qUdWwb1BZ50WoUOmr7IuTBUHTJ4BJOpHvmpOCN0cwDcPhYrqX02OEaHBvd5ZEQIIxiGR83PPZgukWJZUMIoH6JYgeAF0G0LBSqUA5d6Sin7QWz4er8d6vq2KcqqYQSSxMIj89HEFQg07lMz4Jcwzx6khPi_MPCPtadKUaRKJRxz29InOXGRpDnU6ix0RTaa1eMBu-eM3-cc175aQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn3TUhjZ-nxWTeJAfoXiRCqwnaI2sLNehsQ1z4nzlwUNrQcnAgodwU-h1ojBmhvX-5Pwq3zDviIQHo7CqckMn-Jr_GaVo0vt8fiUQlxWcYlcQn3B1UuAZ1rJHJrmRhrysXHiND6koZe8NwK8u-ciNqvdWy0bkl-uJ6bfcIgrEqV9a56YjxAPyTxstw8qQ6U6mSwgNIlS_UNs7k5oFUyi8hw4lBHDi8BRXRcYC1GnWNKMn7x4yCjq77yghdumHdprZ-ixDzkKmrTJ3jPr0ZzmoXa7kDUhZp1pEEqhtP72TY-ViIOapeIlx2wCTF1vdiyoMosNN4kZ1ip4YpU-vcnHt9_3ws-Kg8iSRsHusHH-5o0IjrBpnSFWa8gGbQ1ucl586YBDqRzVEV0maSK_gvliX_fnRrFyZNmcT-vdRsNQ9gdw4O47RwtCMSvoIBkA2l9b3cPF4xjEEVGrEwKlz2bb4FjHs9q3rWkgWtNFztUYt8Uz_ymxeIPL0TS3933ZrFcUU7OYoHi-srhpacphG-MIs_hMa1yh7zLFRBhxSHOZhMruH4lfSvNWC6r0cja10q4FqZA%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXfQG-ixEm3jnE7APXH2LAQa4D5JiQJWz06PIGr6tOe38fam6BscldG2e7uqVCY9j866NGLeJqdW-phMMFJeUdaudoiC5zwsLSyM35EZ9YwCSrR2Te4qkHa7fgYyr0sb_ADUDbJYjxbH7P0p7K7wJGLhLalReJbeyDXX8WlkaYnCsudlRubNCjSjxEC2NTakFKWlgW4PQtthC0mHC7had9VSuIDSCSCoO21PwbOBlA62CPijZQGR4Ca9Bm0X-u8EYSYIzQAVzhCjsf8FX4cRiV4aLt2lOWE1JmsbpqtwUocLUMvwCiu3UZVPLAkMkhmnIZERpYbsDml4LraxEOIPP47-7t5E1-w6_kU5qEbtmEOQAldo8vRUwegHKH69-fK6-sDBlWso4DlmihjChLUG8I9WPqSUeMt45i5ab5LNPFeH_m-M__zL7vljQdbsiFj8v-kVJ5q0RxrVrNrFdyXym35OQwA9wSpKlcOT0sSMYvkZnx2cVgZN9Sptvs-S4wB0kqrgmHTka7CamoaeQSsDduWL1lGxyIAy9cyXU-QuVotrJnAHEaGmiSlxuam6JM1J37UpiUXfQq5nCw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn4sshzNeZPHNGHXMp0B_USn2tvMcVDUoRfawsafOQw3lXO1o9xT78ic1oNBkJVqwzPH1ygZgtfYytFnh46sFv93ghuo5GXeEFkfdG_YDMn6X-SbQPQtUZmrzzenloeiLxmjHHOz9udltz1JYvmznkTsANta7s3o9v340uNlES9FGUc6sm8CivZL9LMeSyLDQ5qbrc24k7pRer_SshQcyiQ3C_O40omJbT0H-sJgmfO6SUkT-Ln4UeR7nxCWVDz6seyqSp9RyDrop3ksxDEE2eVpjgQvQ_zLKSw91Avh_JhZsg2DDGke0xbJ0-h6QoI_WuLExtsqPmiNiqtojUgOWk-1yj-VDPaDS7CHwwiqd7BmlFPXCnSSxHwrV70YQDAR1617vlFGUFYgNPyduJK11HtnKLKK_2HHQ-nvBUYWMXvSbIVMq_-Xixp3i37PEkI4n5LUzizHozqNm1uKy5ZQCiGiJj85pzgHu2FoRn3mirGpltBfQSGj2hlHMUBfMZopuFH8oBeE5ujaXJN_UMaY6r8NC_cPljmKH6jqXuztAlp2L-GbxPzjKu0E0ZAN1Fsyf5w%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn3UsniXbGGEI_Dy0r48I9MriwAed_Qy9BP5CgKovEkPnrUd_pMNO748o0wGYD8NhWC7iJxm_vgqvC-pk6ImHBrRcLiBgfvVKxTmrQD0bnuE25mOmIxGXZ5yD--70XRkcRvbJrjgk8bJH14z5tSOfhKc4sWhKgkPRfnRKYF-43ZH5-f2RsCUqozH8uK3DEHl8QrUWYO-XoGOBGFEX0na-tE-0VNZPIqjEtquwh-oDEB8byALHfF5UA-xriodLATUOwdUXW_qLylD82GJrEgH83WwYe37jBMb34-ZSPdRRFg5UliKDhTzZaHmpswH1ZoqwF3vOYBwZOL8oho4qDp6T9RWB7esta9Fk1osdst77SwDjmX4PJZ_DBATHdpsYebvXwjz_t8SKEpL-btXipyPpV8ns_kK2PO3oueGHzddaZOip9mNt07zHk9DcCMmsQRL3kva7wW9QLQ5enwMlQul4dNGcsp4nAz6qf0NYF1fXA-buFHizar9JmSWRZeeHfbrMt1WP0Fe3yxhkMj1Qn_ysZjDtWFSR2AgeLZRe_KP_vMS0Kxxh11jJmaZK8wzVRNc0Lw%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwp0Fqwg79flQD7tr_M3uL-cmVgAkZYYA3yGShX4SR6MQVNF06m3HRqn6WmCgHxqMyorlsaYylT9Kz1QcSKZCtwWlSQ6DwKkWzf4_Z0qpoPBfstzEanD1ev8RAdOtQkm6oRiI6qM7xiIH41WLsjOof5EnbyGaIN9JQg32CcLdBSZNPFqXVqycPgkAk5koFdMxBbwYDTF3B7J7ni_uvQp077hJOXpV99taIWaKtqR1wLfFgAxNs7BA371fh77HtNLc4x1huhPB1nd1AyQxGMIYYTFBjwbj0BrYZrNUGtbp96YKksvnOQfyDyhMgeqovMx1VdySz6xBCSndII5cu28bZqoQGMUecbP38RjuevGkxItmdpD2lA1OpAs3VwzK7odmB0VnIFlgMQ0SnUnk-wedOaGxNnzW0bxzIVubABEc1InH2V8ne-j43o01omyWB4CkT4OoFNuyenCQEwv828J1Gx2xd6xElW_ZcN-NxtHlm_c8zPW5Auwdm5mFHsKPKjeJEubsGZtyf0vpGusAVzmOpcWw564D8YQcUXr6ThIwV6GyRQWU_YsCaPgzOVEI_E94w%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qn0IE7VxUXfzAqa5vHYJ5pZ6SeVXc4zUlf4x2nGSU2hUgWHCZFHR81J-0-Gtg-LGbI1SPPs8QNqbSa-9bH90XxUT9oieYChlS_VXZ48mO3dv7J56gp7DydvbVdBDwP4VnkjJjMJ9gZrY2L1txMkox9x1G2lWW2RBKC1pvFLQK2l_WNcPqNEAGsCGi_jrMc-pNrT6EGU3OsL-BE4exB3tvVZzeKMwUjleh3ZBppHlU3kL1kerUZV_t2s11ryZb8KiHKyDgwPN0wHKv2-VvAKjlQTuZuKH5xcTIsMgNE0tyBq4LSkrN9zq7UxaBOtGYZCo54NOPjsqCv9gEhrf5m559piaYHMCmPwmiKoTPHwzmqH2WUlroH5cD0IUknxAwhMZi4Vp31RVqzxr22nQbwssZLfJkiee5_a3uAzLsevANz7sC376P1Ii7QyL5s0abxxp4LuVq63WQJwtqRcSU9mWTsPGN4IhenIGdDvn6CGbKLo_42QLrGJBxyNVEKe_5XG692nVFkptY1sk6ymCIuhPMh6_BBayHcKJ8QqQ-mbfjZKicrfr520jKvPh0mHfUKSXrXQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnyBu1Sb2WV0zU-flrFq33rLwhOJRrHgeBzYRQyCW26junZhjZQmHzlFK6GTrZc58PzgncHl2XGvKPAFIZq2vLWj4IRpw9inNeIt9-eT7mWwE71Kpiq_a0C0H_U507lxH88euk3zv-VWFm47pIEioSNTxwnS9ruesyadm7bMP1kNl-2Vad4ruXrEq9lwGl7XrgtVyHwvZQi2xLYKzXvRBmF6_HFM5JRw6jmJhgh2taWi5OHiECC4nAzMPd3xa_vRAjWTDnYUavx1-ZZxKtYIVZRZMV2uT6oLUMy_PR0Nqtkp9sXJ5f9IhIDdgEqU2NegGX8v329xCerR9sTwUsZap8fVaKDfIQhc3-BLkoZDfySTPpmGpONXJIuw2AR5bsA-x67i0zK-3fc5ZtWhSpiQNFD3sb2KPApKIL7TSvwNT5kaCfzuC9S9nTE53f55gSBUeooryMAzaYiugH7Ccp10EYOwpozRNeMP5LtOH5PnIw-aWTbWrpRz6k32Mm7YScncRM1ZJESl9DWM5updWvWxH2PyG3v4-jcFlBD6oDSIY3T0-UO-YUW-3Rzi1u8C7CFzZeQ%3D%3D&p=9NwGV8Ov71o%3DgW5NEpb6rjb84bkaCQyOq-myT0C-Ktb_kF97hamPuz4ZZk3rmRrVU_m2Z51XN3szZYaCPxNG07BYjyjwYkBVGTfTGYPVecze9u-jGHCQmfvey4yZrPyKR-cA01PbV3h61GBiHFc-skGrpoDK0eliCfJPX7f9_IVT-MEKcW_xpZDYqzKjXUHiQsLrHT20Gp1KXxeziwOkvWsdwperhvo0QVYz792Gb3YbAFvHV-rqy9jVx2a_IYsa5ogivNJ89TOOZYFJaQiTmXctz3H9p--qnwUjWD4CwDOPsMg4ApN_Xbni4NS'

if (!(bodys && bodys != '')) {
  $.msg("", "", '请先阅读文章获取中青body\nbody获取越多，脚本可获得青豆越多')
  $.done()
}
let YouthBody = bodys.split('&');
let ReadArr = [];
let readscore




Object.keys(YouthBody).forEach((item) => {
  if (YouthBody[item]) {
    ReadArr.push(YouthBody[item])
  }
})
let indexLast = $.getdata('zqgetbody_body_index');
$.begin = indexLast ? parseInt(indexLast,10) : 1;
console.log(`============ 脚本执行-国际标准时间(UTC)：${new Date().toLocaleString()}  =============\n`)
console.log(`============ 脚本执行-北京时间(UTC+8)：${new Date(new Date().getTime() + 8 * 60 * 60 * 1000).toLocaleString()}  =============\n`)
!(async () => {
  if (!ReadArr[0]) {
    console.log($.name, '【提示】请把抓包的请求体填入Github 的 Secrets 中，请以&隔开')
    return;
  }

  $.msg('', '', `中青body数：${ReadArr.length}个\n上次执行到第${$.begin}个\n预计执行${((ReadArr.length - $.begin) / 120).toFixed(2)}个小时`)
  $.index = 0;
  for (let i = indexLast ? indexLast : 0; i < ReadArr.length; i++) {
    if (ReadArr[i]) {
      articlebody = ReadArr[i];
      $.index = $.index + 1;
      console.log(`-------------------------\n\n开始中青看点第${$.index}次阅读`)
    }
    await AutoRead();
  }
  $.msg('', '', `中青看点共完成${$.index}次阅读\n共计获得${readscore}个青豆，阅读请求全部结束`)
})()
  .catch((e) => $.logErr(e))
  .finally(() => $.done())


function AutoRead() {

  return new Promise((resolve, reject) => {
    let url = {
      url: `https://ios.baertt.com/v5/article/complete.json`,
      headers: {
        'User-Agent': 'KDApp/1.7.8 (iPhone; iOS 14.0; Scale/3.00)'
      },
      body: articlebody
    };
    $.post(url, async (error, response, data) => {
      $.begin=$.begin+1;
      let res=$.begin%ReadArr.length;
	  console.log(JSON.parse(data).message);
      $.setdata(res+"", 'zqgetbody_body_index');
      let readres = JSON.parse(data);
      if (readres.error_code == '0' && typeof readres.items.read_score === 'number') {
        console.log(`\n本次阅读获得${readres.items.read_score}个青豆，请等待30s后执行下一次阅读\n`);
        readscore += readres.items.read_score;
        await $.wait(30000);
      }
      else if (readres.error_code == '0' && typeof readres.items.score === 'number') {
        console.log(`\n本次阅读获得${readres.items.score}个青豆，即将开始下次阅读\n`)
        readscore += readres.items.score;
        await $.wait(30000);
      }
      else if (readres.items.max_notice == '\u770b\u592a\u4e45\u4e86\uff0c\u63621\u7bc7\u8bd5\u8bd5') {
        console.log(readres.items.max_notice)
      }
      else if (readres.success == false) {
        console.log(`第${$.index}次阅读请求失败`)
      }

      resolve()
    })

  })
}

function Env(t, e) { class s { constructor(t) { this.env = t } send(t, e = "GET") { t = "string" == typeof t ? { url: t } : t; let s = this.get; return "POST" === e && (s = this.post), new Promise((e, i) => { s.call(this, t, (t, s, r) => { t ? i(t) : e(s) }) }) } get(t) { return this.send.call(this.env, t) } post(t) { return this.send.call(this.env, t, "POST") } } return new class { constructor(t, e) { this.name = t, this.http = new s(this), this.data = null, this.dataFile = "box.dat", this.logs = [], this.isMute = !1, this.isNeedRewrite = !1, this.logSeparator = "\n", this.startTime = (new Date).getTime(), Object.assign(this, e), this.log("", `\ud83d\udd14${this.name}, \u5f00\u59cb!`) } isNode() { return "undefined" != typeof module && !!module.exports } isQuanX() { return "undefined" != typeof $task } isSurge() { return "undefined" != typeof $httpClient && "undefined" == typeof $loon } isLoon() { return "undefined" != typeof $loon } toObj(t, e = null) { try { return JSON.parse(t) } catch { return e } } toStr(t, e = null) { try { return JSON.stringify(t) } catch { return e } } getjson(t, e) { let s = e; const i = this.getdata(t); if (i) try { s = JSON.parse(this.getdata(t)) } catch { } return s } setjson(t, e) { try { return this.setdata(JSON.stringify(t), e) } catch { return !1 } } getScript(t) { return new Promise(e => { this.get({ url: t }, (t, s, i) => e(i)) }) } runScript(t, e) { return new Promise(s => { let i = this.getdata("@chavy_boxjs_userCfgs.httpapi"); i = i ? i.replace(/\n/g, "").trim() : i; let r = this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout"); r = r ? 1 * r : 20, r = e && e.timeout ? e.timeout : r; const [o, h] = i.split("@"), a = { url: `http://${h}/v1/scripting/evaluate`, body: { script_text: t, mock_type: "cron", timeout: r }, headers: { "X-Key": o, Accept: "*/*" } }; this.post(a, (t, e, i) => s(i)) }).catch(t => this.logErr(t)) } loaddata() { if (!this.isNode()) return {}; { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e); if (!s && !i) return {}; { const i = s ? t : e; try { return JSON.parse(this.fs.readFileSync(i)) } catch (t) { return {} } } } } writedata() { if (this.isNode()) { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e), r = JSON.stringify(this.data); s ? this.fs.writeFileSync(t, r) : i ? this.fs.writeFileSync(e, r) : this.fs.writeFileSync(t, r) } } lodash_get(t, e, s) { const i = e.replace(/\[(\d+)\]/g, ".$1").split("."); let r = t; for (const t of i) if (r = Object(r)[t], void 0 === r) return s; return r } lodash_set(t, e, s) { return Object(t) !== t ? t : (Array.isArray(e) || (e = e.toString().match(/[^.[\]]+/g) || []), e.slice(0, -1).reduce((t, s, i) => Object(t[s]) === t[s] ? t[s] : t[s] = Math.abs(e[i + 1]) >> 0 == +e[i + 1] ? [] : {}, t)[e[e.length - 1]] = s, t) } getdata(t) { let e = this.getval(t); if (/^@/.test(t)) { const [, s, i] = /^@(.*?)\.(.*?)$/.exec(t), r = s ? this.getval(s) : ""; if (r) try { const t = JSON.parse(r); e = t ? this.lodash_get(t, i, "") : e } catch (t) { e = "" } } return e } setdata(t, e) { let s = !1; if (/^@/.test(e)) { const [, i, r] = /^@(.*?)\.(.*?)$/.exec(e), o = this.getval(i), h = i ? "null" === o ? null : o || "{}" : "{}"; try { const e = JSON.parse(h); this.lodash_set(e, r, t), s = this.setval(JSON.stringify(e), i) } catch (e) { const o = {}; this.lodash_set(o, r, t), s = this.setval(JSON.stringify(o), i) } } else s = this.setval(t, e); return s } getval(t) { return this.isSurge() || this.isLoon() ? $persistentStore.read(t) : this.isQuanX() ? $prefs.valueForKey(t) : this.isNode() ? (this.data = this.loaddata(), this.data[t]) : this.data && this.data[t] || null } setval(t, e) { return this.isSurge() || this.isLoon() ? $persistentStore.write(t, e) : this.isQuanX() ? $prefs.setValueForKey(t, e) : this.isNode() ? (this.data = this.loaddata(), this.data[e] = t, this.writedata(), !0) : this.data && this.data[e] || null } initGotEnv(t) { this.got = this.got ? this.got : require("got"), this.cktough = this.cktough ? this.cktough : require("tough-cookie"), this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar, t && (t.headers = t.headers ? t.headers : {}, void 0 === t.headers.Cookie && void 0 === t.cookieJar && (t.cookieJar = this.ckjar)) } get(t, e = (() => { })) { t.headers && (delete t.headers["Content-Type"], delete t.headers["Content-Length"]), this.isSurge() || this.isLoon() ? (this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient.get(t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status), e(t, s, i) })) : this.isQuanX() ? (this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t))) : this.isNode() && (this.initGotEnv(t), this.got(t).on("redirect", (t, e) => { try { if (t.headers["set-cookie"]) { const s = t.headers["set-cookie"].map(this.cktough.Cookie.parse).toString(); this.ckjar.setCookieSync(s, null), e.cookieJar = this.ckjar } } catch (t) { this.logErr(t) } }).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => { const { message: s, response: i } = t; e(s, i, i && i.body) })) } post(t, e = (() => { })) { if (t.body && t.headers && !t.headers["Content-Type"] && (t.headers["Content-Type"] = "application/x-www-form-urlencoded"), t.headers && delete t.headers["Content-Length"], this.isSurge() || this.isLoon()) this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient.post(t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status), e(t, s, i) }); else if (this.isQuanX()) t.method = "POST", this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t)); else if (this.isNode()) { this.initGotEnv(t); const { url: s, ...i } = t; this.got.post(s, i).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => { const { message: s, response: i } = t; e(s, i, i && i.body) }) } } time(t) { let e = { "M+": (new Date).getMonth() + 1, "d+": (new Date).getDate(), "H+": (new Date).getHours(), "m+": (new Date).getMinutes(), "s+": (new Date).getSeconds(), "q+": Math.floor(((new Date).getMonth() + 3) / 3), S: (new Date).getMilliseconds() }; /(y+)/.test(t) && (t = t.replace(RegExp.$1, ((new Date).getFullYear() + "").substr(4 - RegExp.$1.length))); for (let s in e) new RegExp("(" + s + ")").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? e[s] : ("00" + e[s]).substr(("" + e[s]).length))); return t } msg(e = t, s = "", i = "", r) { const o = t => { if (!t) return t; if ("string" == typeof t) return this.isLoon() ? t : this.isQuanX() ? { "open-url": t } : this.isSurge() ? { url: t } : void 0; if ("object" == typeof t) { if (this.isLoon()) { let e = t.openUrl || t.url || t["open-url"], s = t.mediaUrl || t["media-url"]; return { openUrl: e, mediaUrl: s } } if (this.isQuanX()) { let e = t["open-url"] || t.url || t.openUrl, s = t["media-url"] || t.mediaUrl; return { "open-url": e, "media-url": s } } if (this.isSurge()) { let e = t.url || t.openUrl || t["open-url"]; return { url: e } } } }; this.isMute || (this.isSurge() || this.isLoon() ? $notification.post(e, s, i, o(r)) : this.isQuanX() && $notify(e, s, i, o(r))); let h = ["", "==============\ud83d\udce3\u7cfb\u7edf\u901a\u77e5\ud83d\udce3=============="]; h.push(e), s && h.push(s), i && h.push(i), console.log(h.join("\n")), this.logs = this.logs.concat(h) } log(...t) { t.length > 0 && (this.logs = [...this.logs, ...t]), console.log(t.join(this.logSeparator)) } logErr(t, e) { const s = !this.isSurge() && !this.isQuanX() && !this.isLoon(); s ? this.log("", `\u2757\ufe0f${this.name}, \u9519\u8bef!`, t.stack) : this.log("", `\u2757\ufe0f${this.name}, \u9519\u8bef!`, t) } wait(t) { return new Promise(e => setTimeout(e, t)) } done(t = {}) { const e = (new Date).getTime(), s = (e - this.startTime) / 1e3; this.log("", `\ud83d\udd14${this.name}, \u7ed3\u675f! \ud83d\udd5b ${s} \u79d2`), this.log(), (this.isSurge() || this.isQuanX() || this.isLoon()) && $done(t) } }(t, e) }
